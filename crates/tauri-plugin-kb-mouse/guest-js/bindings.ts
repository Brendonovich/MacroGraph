// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

export const commands = {
	async simulateKeys(keys: Key[], holdDuration: number): Promise<null> {
		return await TAURI_INVOKE("plugin:kb-mouse|simulate_keys", {
			keys,
			holdDuration,
		});
	},
	async simulateMouse(button: Button, holdDuration: number): Promise<null> {
		return await TAURI_INVOKE("plugin:kb-mouse|simulate_mouse", {
			button,
			holdDuration,
		});
	},
	async setMousePosition(
		x: number,
		y: number,
		absolute: boolean,
	): Promise<null> {
		return await TAURI_INVOKE("plugin:kb-mouse|set_mouse_position", {
			x,
			y,
			absolute,
		});
	},
};

/** user-defined types **/

/**
 * Standard mouse buttons
 * Some mice have more than 3 buttons. These are not defined, and different
 * OSs will give different `Button::Unknown` values.
 */
export type Button = "Left" | "Right" | "Middle" | { Unknown: number };
/**
 * Key names based on physical location on the device
 * Merge Option(MacOS) and Alt(Windows, Linux) into Alt
 * Merge Windows (Windows), Meta(Linux), Command(MacOS) into Meta
 * Characters based on Qwerty layout, don't use this for characters as it WILL
 * depend on the layout. Use Event.name instead. Key modifiers gives those keys
 * a different value too.
 * Careful, on Windows KpReturn does not exist, it' s strictly equivalent to Return, also Keypad keys
 * get modified if NumLock is Off and ARE pagedown and so on.
 */
export type Key =
	/**
	 * Alt key on Linux and Windows (option key on macOS)
	 */
	| "Alt"
	| "AltGr"
	| "Backspace"
	| "CapsLock"
	| "ControlLeft"
	| "ControlRight"
	| "Delete"
	| "DownArrow"
	| "End"
	| "Escape"
	| "F1"
	| "F10"
	| "F11"
	| "F12"
	| "F2"
	| "F3"
	| "F4"
	| "F5"
	| "F6"
	| "F7"
	| "F8"
	| "F9"
	| "Home"
	| "LeftArrow"
	/**
	 * also known as "windows", "super", and "command"
	 */
	| "MetaLeft"
	/**
	 * also known as "windows", "super", and "command"
	 */
	| "MetaRight"
	| "PageDown"
	| "PageUp"
	| "Return"
	| "RightArrow"
	| "ShiftLeft"
	| "ShiftRight"
	| "Space"
	| "Tab"
	| "UpArrow"
	| "PrintScreen"
	| "ScrollLock"
	| "Pause"
	| "NumLock"
	| "BackQuote"
	| "Num1"
	| "Num2"
	| "Num3"
	| "Num4"
	| "Num5"
	| "Num6"
	| "Num7"
	| "Num8"
	| "Num9"
	| "Num0"
	| "Minus"
	| "Equal"
	| "KeyQ"
	| "KeyW"
	| "KeyE"
	| "KeyR"
	| "KeyT"
	| "KeyY"
	| "KeyU"
	| "KeyI"
	| "KeyO"
	| "KeyP"
	| "LeftBracket"
	| "RightBracket"
	| "KeyA"
	| "KeyS"
	| "KeyD"
	| "KeyF"
	| "KeyG"
	| "KeyH"
	| "KeyJ"
	| "KeyK"
	| "KeyL"
	| "SemiColon"
	| "Quote"
	| "BackSlash"
	| "IntlBackslash"
	| "KeyZ"
	| "KeyX"
	| "KeyC"
	| "KeyV"
	| "KeyB"
	| "KeyN"
	| "KeyM"
	| "Comma"
	| "Dot"
	| "Slash"
	| "Insert"
	| "KpReturn"
	| "KpMinus"
	| "KpPlus"
	| "KpMultiply"
	| "KpDivide"
	| "Kp0"
	| "Kp1"
	| "Kp2"
	| "Kp3"
	| "Kp4"
	| "Kp5"
	| "Kp6"
	| "Kp7"
	| "Kp8"
	| "Kp9"
	| "KpDelete"
	| "Function"
	| { Unknown: number };

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE } from "@tauri-apps/api";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import type { WebviewWindowHandle as __WebviewWindowHandle__ } from "@tauri-apps/api/window";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: T extends null
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

type __Result__<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & (handle: __WebviewWindowHandle__) => __EventObj__<T[K]>;
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindowHandle__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
